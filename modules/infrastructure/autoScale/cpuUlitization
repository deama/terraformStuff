resource "aws_launch_configuration" "launch1" {
	name_prefix = "terraform-launch1"
	image_id = var.ami_id
	instance_type = "t2.micro"

	user_data = file("${path.module}/userData/start.sh")
	
	security_groups = [var.security_group_ids]

	lifecycle {
		create_before_destroy = true
	}
}

resource "aws_autoscaling_group" "scale1" {
	name = "scale_app1"
	launch_configuration = aws_launch_configuration.launch1.name
	min_size = 1
	max_size = 2
	desired_capacity = 1
	vpc_zone_identifier = [var.aws_subnet_id, var.aws_subnet_id2]


	lifecycle {
		create_before_destroy = true
	}
}

resource "aws_autoscaling_policy" "policy-up" {
	name = "policy-up"
	autoscaling_group_name = aws_autoscaling_group.scale1.name
	adjustment_type = "ChangeInCapacity"
	scaling_adjustment = 1
	cooldown = "100"
	policy_type = "SimpleScaling"
}

resource "aws_cloudwatch_metric_alarm" "alarm-up" {
	alarm_name = "alarm-up"
	comparison_operator = "GreaterThanOrEqualToThreshold"
	evaluation_periods = "2"
	metric_name = "CPUUtilization"
	namespace = "AWS/EC2"
	period = "60"
	statistic = "Average"
	threshold = "70"

	dimensions = {
		"AutoScalingGroupName" = aws_autoscaling_group.scale1.name
	}
	
	actions_enabled = true

	alarm_actions = [aws_autoscaling_policy.policy-up.arn]
}

resource "aws_autoscaling_policy" "policy-down" {
	name = "poliicy-down"
	autoscaling_group_name = aws_autoscaling_group.scale1.name
	adjustment_type = "ChangeInCapacity"
	scaling_adjustment = -1
	cooldown = "100"
	policy_type = "SimpleScaling"
}

resource "aws_cloudwatch_metric_alarm" "alarm-down" {
	alarm_name = "alarm-down"
	comparison_operator = "LessThanOrEqualToThreshold"
	evaluation_periods = "2"
	metric_name = "CPUUtilization"
	namespace = "AWS/EC2"
	period = "60"
	statistic = "Average"
	threshold = "5"

	dimensions = {
		"AutoScalingGroupName" = aws_autoscaling_group.scale1.name
	}

	actions_enabled = true
	alarm_actions = [aws_autoscaling_policy.policy-down.arn]
}


